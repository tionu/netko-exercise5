package persistence;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;

import persistence.exceptions.NonExistingIdException;
import persistence.model.Arzt;
import persistence.model.Arztbrief;
import persistence.model.Fachbereich;
import persistence.model.Hospitalisation;
import persistence.model.Patient;

public class SQLitePersistence implements PersistenceProvider {

	// date format used to store date-objects as strings in database.
	public static final DateFormat DATE_FORMAT = new SimpleDateFormat("dd.MM.yyyy");

	// default db location
	private static final Path DEFAULT_DB_PATH = Paths.get("./Patienten.db");

	private static HashMap<Path, SQLitePersistence> singletonInstances = new HashMap<>();

	private Connection dbConnection = null;

	private SQLitePersistence(Path dbPath) {
		try {
			Class.forName("org.sqlite.JDBC");
			dbConnection = DriverManager.getConnection("jdbc:sqlite:" + dbPath.toString());
			System.out.println("database opened: " + dbPath.toString());
		} catch (Exception e) {
			System.err.println(e.getMessage());
			System.exit(0);
		}
	}

	public static SQLitePersistence getInstance() {
		return getInstance(DEFAULT_DB_PATH);
	}

	public static synchronized SQLitePersistence getInstance(Path dbPath) {
		if (!singletonInstances.containsKey(dbPath)) {
			singletonInstances.put(dbPath, new SQLitePersistence(dbPath));
		}
		return singletonInstances.get(dbPath);
	}

	public Integer create(HospitalObject hospitalObject) {
		if (hospitalObject.getId() != null) {
			System.err.println(
					"ID ignored: cannot create object with given ID, because ID is auto generated by database.");
		}
		switch (hospitalObject.getClass().getSimpleName()) {
		case "Arztbrief":
			return createArztbrief((Arztbrief) hospitalObject);
		case "Arzt":
			return createArzt((Arzt) hospitalObject);
		case "Fachbereich":
			return createFachbereich((Fachbereich) hospitalObject);
		case "Hospitalisation":
			return createHospitalisation((Hospitalisation) hospitalObject);
		case "Patient":
			return createPatient((Patient) hospitalObject);
		}
		return null;
	}

	private Integer createArztbrief(Arztbrief arztbrief) {
		Integer key = null;
		try {
			PreparedStatement statement = dbConnection.prepareStatement(
					"INSERT INTO ABArztbrief (ABHOID, ABARID, ABTitel, ABText) VALUES (?,?,?,?)",
					Statement.RETURN_GENERATED_KEYS);
			statement.setInt(1, arztbrief.getHospitalisation().getId());
			statement.setInt(2, arztbrief.getArzt().getId());
			statement.setString(3, arztbrief.getTitel());
			statement.setString(4, arztbrief.getText());
			statement.execute();
			statement.close();
			ResultSet rs = statement.getGeneratedKeys();
			if (rs.next()) {
				key = rs.getInt(1);
			}
			System.out.println("item created in db: type=\"Arztbrief\", ID=" + key);
		} catch (SQLException e) {
			String message = "error creating item in db: type=\"Arztbrief\", ID=" + key;
			System.err.println(message);
			e.printStackTrace();
		}
		return key;
	}

	private Integer createArzt(Arzt arzt) {
		Integer key = null;
		try {
			PreparedStatement statement = dbConnection.prepareStatement(
					"INSERT INTO ARArzt (ARVorname, ARNachname, ARTitel, ARFAID, ARUsername, ARPassword) VALUES (?,?,?,?,?,?)",
					Statement.RETURN_GENERATED_KEYS);
			statement.setString(1, arzt.getVorname());
			statement.setString(2, arzt.getNachname());
			statement.setString(3, arzt.getTitel());
			statement.setInt(4, arzt.getFachbereich().getId());
			statement.setString(5, arzt.getUsername());
			statement.setString(6, arzt.getPassword());
			statement.execute();
			statement.close();
			ResultSet rs = statement.getGeneratedKeys();
			if (rs.next()) {
				key = rs.getInt(1);
			}
			System.out.println("item created in db: type=\"Arzt\", ID=" + key);
		} catch (SQLException e) {
			String message = "error creating item in db: type=\"Arzt\", ID=" + key;
			System.err.println(message);
			e.printStackTrace();
		}
		return key;
	}

	private Integer createFachbereich(Fachbereich fachbereich) {
		Integer key = null;
		try {
			PreparedStatement statement = dbConnection.prepareStatement("INSERT INTO FAFachbereich (FAName) VALUES (?)",
					Statement.RETURN_GENERATED_KEYS);
			statement.setString(1, fachbereich.getName());
			statement.execute();
			statement.close();
			ResultSet rs = statement.getGeneratedKeys();
			if (rs.next()) {
				key = rs.getInt(1);
			}
			System.out.println("item created in db: type=\"Fachbereich\", ID=" + key);
		} catch (SQLException e) {
			String message = "error creating item in db: type=\"Fachbereich\", ID=" + key;
			System.err.println(message);
			e.printStackTrace();
		}
		return key;
	}

	private Integer createHospitalisation(Hospitalisation hospitalisation) {
		Integer key = null;
		try {
			PreparedStatement statement = dbConnection.prepareStatement(
					"INSERT INTO HOHospitalisation (HOAufnahmeDatum, HOEntlassDatum, HOPAID, HOFAID) VALUES (?,?,?,?)",
					Statement.RETURN_GENERATED_KEYS);
			String aufnahmeDatum = hospitalisation.getAufnahmeDatum() != null
					? DATE_FORMAT.format(hospitalisation.getAufnahmeDatum()) : "";
			statement.setString(1, aufnahmeDatum);
			String entlassDatum = hospitalisation.getEntlassDatum() != null
					? DATE_FORMAT.format(hospitalisation.getEntlassDatum()) : "";
			statement.setString(2, entlassDatum);
			statement.setInt(3, hospitalisation.getPatient().getId());
			statement.setInt(4, hospitalisation.getFachbereich().getId());
			statement.execute();
			statement.close();
			ResultSet rs = statement.getGeneratedKeys();
			if (rs.next()) {
				key = rs.getInt(1);
			}
			System.out.println("item created in db: type=\"Hospitalisation\", ID=" + key);
		} catch (SQLException e) {
			String message = "error creating item in db: type=\"Hospitalisation\", ID=" + key;
			System.err.println(message);
			e.printStackTrace();
		}
		return key;
	}

	private Integer createPatient(Patient patient) {
		Integer key = null;
		try {
			PreparedStatement statement = dbConnection.prepareStatement(
					"INSERT INTO PAPatient (PANachname, PAVorname, PAGeburtsDatum) VALUES (?,?,?)",
					Statement.RETURN_GENERATED_KEYS);
			statement.setString(1, patient.getNachname());
			statement.setString(2, patient.getVorname());
			statement.setString(3, DATE_FORMAT.format(patient.getGeburtsdatum()));
			statement.execute();
			statement.close();
			ResultSet rs = statement.getGeneratedKeys();
			if (rs.next()) {
				key = rs.getInt(1);
			}
			System.out.println("item created in db: type=\"Patient\", ID=" + key);
		} catch (SQLException e) {
			String message = "error creating item in db: type=\"Patient\", ID=" + key;
			System.err.println(message);
			e.printStackTrace();
		}
		return key;
	}

	@SuppressWarnings("unchecked")
	public <T extends HospitalObject> T read(Class<T> hospitalObjectClass, int id) {
		switch (hospitalObjectClass.getSimpleName()) {
		case "Arztbrief":
			return (T) readArztbrief(id);
		case "Arzt":
			return (T) readArzt(id);
		case "Fachbereich":
			return (T) readFachbereich(id);
		case "Hospitalisation":
			return (T) readHospitalisation(id);
		case "Patient":
			return (T) readPatient(id);
		}
		return null;
	}

	private Arztbrief readArztbrief(int id) {
		return readArztbrief(Optional.of(id)).get(id);
	}

	private HashMap<Integer, Arztbrief> readArztbrief(Optional<Integer> id) {
		String queryFilter = id.isPresent() ? " WHERE ABID = " + id.get() : "";
		HashMap<Integer, Arztbrief> arztbriefList = new HashMap<>();
		Arztbrief arztbrief;
		Patient patient;
		Fachbereich fachbereich;
		int arztId = 0;
		Hospitalisation hospitalisation = new Hospitalisation();
		try {
			ResultSet queryResult = dbConnection.createStatement().executeQuery(
					"SELECT ABID, ABARID, ABHOID, ABTitel, ABText, HOAufnahmeDatum, HOEntlassDatum, HOPAID, HOFAID, PANachname, PAVorname, PAGeburtsDatum, FAName FROM ABArztbrief INNER JOIN HOHospitalisation ON ABHOID=HOID INNER JOIN PAPAtient ON HOPAID=PAID INNER JOIN FAFachbereich ON HOFAID=FAID"
							+ queryFilter);
			while (queryResult.next()) {
				arztbrief = new Arztbrief();
				patient = new Patient();
				fachbereich = new Fachbereich();
				arztbrief.setId(queryResult.getInt("ABID"));
				arztbrief.setTitel(queryResult.getString("ABTitel"));
				arztbrief.setText(queryResult.getString("ABText"));
				arztId = queryResult.getInt("ABARID");
				hospitalisation.setId(queryResult.getInt("ABHOID"));
				String aufnahmeDatum = queryResult.getString("HOAufnahmeDatum");
				if (aufnahmeDatum.isEmpty()) {
					hospitalisation.setAufnahmeDatum(null);
				} else {
					hospitalisation.setAufnahmeDatum(DATE_FORMAT.parse(aufnahmeDatum));
				}
				String entlassDatum = queryResult.getString("HOEntlassDatum");
				if (entlassDatum.isEmpty()) {
					hospitalisation.setEntlassDatum(null);
				} else {
					hospitalisation.setEntlassDatum(DATE_FORMAT.parse(entlassDatum));
				}
				patient.setId(queryResult.getInt("HOPAID"));
				patient.setNachname(queryResult.getString("PANachname"));
				patient.setVorname(queryResult.getString("PAVorname"));
				patient.setGeburtsdatum(DATE_FORMAT.parse(queryResult.getString("PAGeburtsdatum")));
				fachbereich.setId(queryResult.getInt("HOFAID"));
				fachbereich.setName(queryResult.getString("FAName"));
				hospitalisation.setPatient(patient);
				hospitalisation.setFachbereich(fachbereich);
				arztbrief.setHospitalisation(hospitalisation);
				arztbrief.setArzt(readArzt(arztId));
				arztbriefList.put(arztbrief.getId(), arztbrief);
			}
		} catch (SQLException e) {
			System.err.println("error reading object from db.");
			e.printStackTrace();
		} catch (ParseException e) {
			System.err.println("error parsing object.");
			e.printStackTrace();
		}
		return arztbriefList;
	}

	private Arzt readArzt(Integer id) {
		return readArzt(Optional.of(id)).get(id);
	}

	private HashMap<Integer, Arzt> readArzt(Optional<Integer> id) {
		String queryFilter = id.isPresent() ? " WHERE ARID = " + id.get() : "";
		HashMap<Integer, Arzt> arztList = new HashMap<>();
		Arzt arzt;
		Fachbereich fachbereich;
		try {
			ResultSet queryResult = dbConnection.createStatement().executeQuery(
					"SELECT ARID, ARVorname, ARNachname, ARTitel, ARFAID, ARUsername, ARPassword, FAName FROM ARArzt INNER JOIN FAFachbereich ON ARFAID=FAID"
							+ queryFilter);
			while (queryResult.next()) {
				arzt = new Arzt();
				fachbereich = new Fachbereich();
				arzt.setId(queryResult.getInt("ARID"));
				arzt.setVorname(queryResult.getString("ARVorname"));
				arzt.setNachname(queryResult.getString("ARNachname"));
				arzt.setTitel(queryResult.getString("ARTitel"));
				arzt.setUsername(queryResult.getString("ARUsername"));
				arzt.setPassword(queryResult.getString("ARPassword"));
				fachbereich.setId(queryResult.getInt("ARFAID"));
				fachbereich.setName(queryResult.getString("FAName"));
				arzt.setFachbereich(fachbereich);
				arztList.put(arzt.getId(), arzt);
			}
		} catch (SQLException e) {
			System.err.println("error reading object from db.");
			e.printStackTrace();
		}
		return arztList;
	}

	private Fachbereich readFachbereich(Integer id) {
		return readFachbereich(Optional.of(id)).get(id);
	}

	private HashMap<Integer, Fachbereich> readFachbereich(Optional<Integer> id) {
		String queryFilter = id.isPresent() ? " WHERE FAID = " + id.get() : "";
		HashMap<Integer, Fachbereich> fachbereichList = new HashMap<>();
		Fachbereich fachbereich;
		try {
			ResultSet queryResult = dbConnection.createStatement()
					.executeQuery("SELECT FAID, FAName FROM FAFachbereich" + queryFilter);
			while (queryResult.next()) {
				fachbereich = new Fachbereich();
				fachbereich.setId(queryResult.getInt("FAID"));
				fachbereich.setName(queryResult.getString("FAName"));
				fachbereichList.put(fachbereich.getId(), fachbereich);
			}
		} catch (SQLException e) {
			System.err.println("error reading object from db.");
			e.printStackTrace();
		}
		return fachbereichList;
	}

	private Hospitalisation readHospitalisation(Integer id) {
		return readHospitalisation(Optional.of(id)).get(id);
	}

	private HashMap<Integer, Hospitalisation> readHospitalisation(Optional<Integer> id) {
		String queryFilter = id.isPresent() ? " WHERE HOID = " + id.get() : "";
		HashMap<Integer, Hospitalisation> hospitalisationList = new HashMap<>();
		Hospitalisation hospitalisation;
		Patient patient;
		Fachbereich fachbereich;
		try {
			ResultSet queryResult = dbConnection.createStatement().executeQuery(
					"SELECT HOID, HOAufnahmeDatum, HOEntlassDatum, HOPAID, HOFAID, PANachname, PAVorname, PAGeburtsDatum, FAName FROM HOHospitalisation INNER JOIN PAPAtient ON HOPAID=PAID INNER JOIN FAFachbereich ON HOFAID=FAID"
							+ queryFilter);
			while (queryResult.next()) {
				hospitalisation = new Hospitalisation();
				patient = new Patient();
				fachbereich = new Fachbereich();
				hospitalisation.setId(queryResult.getInt("HOID"));
				String aufnahmeDatum = queryResult.getString("HOAufnahmeDatum");
				if (aufnahmeDatum.isEmpty()) {
					hospitalisation.setAufnahmeDatum(null);
				} else {
					hospitalisation.setAufnahmeDatum(DATE_FORMAT.parse(aufnahmeDatum));
				}
				String entlassDatum = queryResult.getString("HOEntlassDatum");
				if (entlassDatum.isEmpty()) {
					hospitalisation.setEntlassDatum(null);
				} else {
					hospitalisation.setEntlassDatum(DATE_FORMAT.parse(entlassDatum));
				}
				patient.setId(queryResult.getInt("HOPAID"));
				patient.setNachname(queryResult.getString("PANachname"));
				patient.setVorname(queryResult.getString("PAVorname"));
				patient.setGeburtsdatum(DATE_FORMAT.parse(queryResult.getString("PAGeburtsdatum")));
				fachbereich.setId(queryResult.getInt("HOFAID"));
				fachbereich.setName(queryResult.getString("FAName"));
				hospitalisation.setPatient(patient);
				hospitalisation.setFachbereich(fachbereich);
				hospitalisationList.put(hospitalisation.getId(), hospitalisation);
			}
		} catch (SQLException e) {
			System.err.println("error reading object from db.");
			e.printStackTrace();
		} catch (ParseException e) {
			System.err.println("error parsing object.");
			e.printStackTrace();
		}
		return hospitalisationList;
	}

	private Patient readPatient(Integer id) {
		return readPatient(Optional.of(id)).get(id);
	}

	private HashMap<Integer, Patient> readPatient(Optional<Integer> id) {
		String queryFilter = id.isPresent() ? " WHERE PAID = " + id.get() : "";
		HashMap<Integer, Patient> patientList = new HashMap<>();
		Patient patient;
		try {
			ResultSet queryResult = dbConnection.createStatement()
					.executeQuery("SELECT PAID, PANachname, PAVorname, PAGeburtsdatum FROM PAPatient" + queryFilter);
			while (queryResult.next()) {
				patient = new Patient();
				patient.setId(queryResult.getInt("PAID"));
				patient.setNachname(queryResult.getString("PANachname"));
				patient.setVorname(queryResult.getString("PAVorname"));
				patient.setGeburtsdatum(DATE_FORMAT.parse(queryResult.getString("PAGeburtsdatum")));
				patientList.put(patient.getId(), patient);
			}
		} catch (SQLException e) {
			System.err.println("error reading object from db.");
			e.printStackTrace();
		} catch (ParseException e) {
			System.err.println("error parsing object.");
			e.printStackTrace();
		}
		return patientList;
	}

	@SuppressWarnings("unchecked")
	public <T extends HospitalObject> List<T> readAll(Class<T> hospitalObjectClass) {
		switch (hospitalObjectClass.getSimpleName()) {
		case "Arztbrief":
			return (List<T>) readAllArztbrief();
		case "Arzt":
			return (List<T>) readAllArzt();
		case "Fachbereich":
			return (List<T>) readAllFachbereich();
		case "Hospitalisation":
			return (List<T>) readAllHospitalisation();
		case "Patient":
			return (List<T>) readAllPatient();
		}
		return null;
	}

	private ArrayList<Arztbrief> readAllArztbrief() {
		Optional<Integer> emptyFilter = Optional.empty();
		return new ArrayList<Arztbrief>(readArztbrief(emptyFilter).values());
	}

	private ArrayList<Arzt> readAllArzt() {
		Optional<Integer> emptyFilter = Optional.empty();
		return new ArrayList<Arzt>(readArzt(emptyFilter).values());
	}

	private ArrayList<Fachbereich> readAllFachbereich() {
		Optional<Integer> emptyFilter = Optional.empty();
		return new ArrayList<Fachbereich>(readFachbereich(emptyFilter).values());
	}

	private ArrayList<Hospitalisation> readAllHospitalisation() {
		Optional<Integer> emptyFilter = Optional.empty();
		return new ArrayList<Hospitalisation>(readHospitalisation(emptyFilter).values());
	}

	private ArrayList<Patient> readAllPatient() {
		Optional<Integer> emptyFilter = Optional.empty();
		return new ArrayList<Patient>(readPatient(emptyFilter).values());
	}

	public void update(HospitalObject hospitalObject) throws NonExistingIdException {
		if (hospitalObject.getId() == null) {
			throw new NonExistingIdException();
		}
		HospitalObject presentHospitalObject = read(hospitalObject.getClass(), hospitalObject.getId());
		if (presentHospitalObject.getId() == null) {
			throw new NonExistingIdException();
		}
		switch (hospitalObject.getClass().getSimpleName()) {
		case "Arztbrief":
			updateArztbrief((Arztbrief) hospitalObject);
			break;
		case "Arzt":
			updateArzt((Arzt) hospitalObject);
			break;
		case "Fachbereich":
			updateFachbereich((Fachbereich) hospitalObject);
			break;
		case "Hospitalisation":
			updateHospitalisation((Hospitalisation) hospitalObject);
			break;
		case "Patient":
			updatePatient((Patient) hospitalObject);
			break;
		}
	}

	private void updateArztbrief(Arztbrief arztbrief) {
		try {
			PreparedStatement statement = dbConnection.prepareStatement(
					"UPDATE ABArztbrief  SET ABHOID = ?, ABARID = ?, ABTitel = ?, ABText = ? WHERE ABID = ?");
			statement.setInt(5, arztbrief.getId());
			statement.setInt(1, arztbrief.getHospitalisation().getId());
			statement.setInt(2, arztbrief.getArzt().getId());
			statement.setString(3, arztbrief.getTitel());
			statement.setString(4, arztbrief.getText());
			statement.execute();
			statement.close();
			System.out.println("item updated in db: type=\"Arztbrief\", ID=" + arztbrief.getId());
		} catch (SQLException e) {
			System.err.println("error creating item in db: type=\"Arztbrief\", ID=" + arztbrief.getId());
			e.printStackTrace();
		}
	}

	private void updateArzt(Arzt arzt) {
		try {
			PreparedStatement statement = dbConnection.prepareStatement(
					"UPDATE ARArzt  SET ARNachname = ?, ARVorname = ?, ARTitel = ?, ARFAID = ?, ARUsername = ?, ARPassword = ? WHERE ARID = ?");
			statement.setInt(7, arzt.getId());
			statement.setString(1, arzt.getNachname());
			statement.setString(2, arzt.getVorname());
			statement.setString(3, arzt.getTitel());
			statement.setInt(4, arzt.getFachbereich().getId());
			statement.setString(5, arzt.getUsername());
			statement.setString(6, arzt.getPassword());
			statement.execute();
			statement.close();
			System.out.println("item updated in db: type=\"Arzt\", ID=" + arzt.getId());
		} catch (SQLException e) {
			System.err.println("error creating item in db: type=\"Arzt\", ID=" + arzt.getId());
			e.printStackTrace();
		}
	}

	private void updateFachbereich(Fachbereich fachbereich) {
		try {
			PreparedStatement statement = dbConnection
					.prepareStatement("UPDATE FAFachbereich  SET FAName = ? WHERE FAID = ?");
			statement.setInt(2, fachbereich.getId());
			statement.setString(1, fachbereich.getName());
			statement.execute();
			statement.close();
			System.out.println("item updated in db: type=\"Fachbereich\", ID=" + fachbereich.getId());
		} catch (SQLException e) {
			System.err.println("error creating item in db: type=\"Fachbereich\", ID=" + fachbereich.getId());
			e.printStackTrace();
		}
	}

	private void updateHospitalisation(Hospitalisation hospitalisation) {
		try {
			PreparedStatement statement = dbConnection.prepareStatement(
					"UPDATE HOHospitalisation  SET HOAufnahmedatum = ?, HOEntlassDatum = ?, HOPAID = ?, HOFAID WHERE HOID = ?");
			statement.setInt(5, hospitalisation.getId());
			statement.setString(1, DATE_FORMAT.format(hospitalisation.getAufnahmeDatum()));
			statement.setString(2, DATE_FORMAT.format(hospitalisation.getEntlassDatum()));
			statement.setInt(3, hospitalisation.getPatient().getId());
			statement.setInt(3, hospitalisation.getFachbereich().getId());
			statement.execute();
			statement.close();
			System.out.println("item updated in db: type=\"Hospitalisation\", ID=" + hospitalisation.getId());
		} catch (SQLException e) {
			System.err.println("error creating item in db: type=\"Hospitalisation\", ID=" + hospitalisation.getId());
			e.printStackTrace();
		}
	}

	private void updatePatient(Patient patient) {
		try {
			PreparedStatement statement = dbConnection.prepareStatement(
					"UPDATE PAPatient  SET PANachname = ?, PAVorname = ?, PAGeburtsdatum = ? WHERE PAID = ?");
			statement.setInt(4, patient.getId());
			statement.setString(1, patient.getNachname());
			statement.setString(2, patient.getVorname());
			statement.setString(3, DATE_FORMAT.format(patient.getGeburtsdatum()));
			statement.execute();
			statement.close();
			System.out.println("item updated in db: type=\"Patient\", ID=" + patient.getId());
		} catch (SQLException e) {
			System.err.println("error creating item in db: type=\"Patient\", ID=" + patient.getId());
			e.printStackTrace();
		}
	}

	public void delete(Class<? extends HospitalObject> hospitalObjectClass, int id) {
		switch (hospitalObjectClass.getSimpleName()) {
		case "Arztbrief":
			deleteArztbrief(id);
			break;
		case "Arzt":
			deleteArzt(id);
			break;
		case "Fachbereich":
			deleteFachbereich(id);
			break;
		case "Hospitalisation":
			deleteHospitalisation(id);
			break;
		case "Patient":
			deletePatient(id);
			break;
		}
	}

	private void deleteArztbrief(int id) {
		try {
			dbConnection.createStatement().execute("DELETE FROM ABArztbrief WHERE ABID = " + id);
			System.out.println("item deleted in db: type=\"Arztbrief\", ID=" + id);
		} catch (SQLException e) {
			System.err.println("error deleting item in db: type=\"Arztbrief\", ID=" + id);
			e.printStackTrace();
		}
	}

	private void deleteArzt(int id) {
		try {
			dbConnection.createStatement().execute("DELETE FROM ARArzt WHERE ARID = " + id);
			System.out.println("item deleted in db: type=\"Arzt\", ID=" + id);
		} catch (SQLException e) {
			System.err.println("error deleting item in db: type=\"Arzt\", ID=" + id);
			e.printStackTrace();
		}
	}

	private void deleteFachbereich(int id) {
		try {
			dbConnection.createStatement().execute("DELETE FROM FAFachbereich WHERE FAID = " + id);
			System.out.println("item deleted in db: type=\"Fachbereich\", ID=" + id);
		} catch (SQLException e) {
			System.err.println("error deleting item in db: type=\"Fachbereich\", ID=" + id);
			e.printStackTrace();
		}
	}

	private void deleteHospitalisation(int id) {
		try {
			dbConnection.createStatement().execute("DELETE FROM HOHospitalisation WHERE HOID = " + id);
			System.out.println("item deleted in db: type=\"Hospitalisation\", ID=" + id);
		} catch (SQLException e) {
			System.err.println("error deleting item in db: type=\"Hospitalisation\", ID=" + id);
			e.printStackTrace();
		}
	}

	private void deletePatient(int id) {
		try {
			dbConnection.createStatement().execute("DELETE FROM PAPatient WHERE PAID = " + id);
			System.out.println("item deleted in db: type=\"Patient\", ID=" + id);
		} catch (SQLException e) {
			System.err.println("error deleting item in db: type=\"Patient\", ID=" + id);
			e.printStackTrace();
		}
	}

	@Override
	public Integer updateOrCreate(HospitalObject hospitalObject) {
		if (hospitalObject.getId() == null) {
			return create(hospitalObject);
		}
		HospitalObject presentHospitalObject = read(hospitalObject.getClass(), hospitalObject.getId());
		if (presentHospitalObject.getId() == null) {
			return create(hospitalObject);
		}
		try {
			update(hospitalObject);
			return hospitalObject.getId();
		} catch (NonExistingIdException ignored) {
		}
		return null;
	}

}
